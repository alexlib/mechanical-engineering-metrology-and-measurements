[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mechanical Engineering Metrology and Measurements (MEMM)",
    "section": "",
    "text": "Preface\nWelcome to the Mechanical Engineering Metrology and Measurements (MEMM)\nThis is a complementary set of Python scripts and snippets collected by Alex Liberzon from the School of Mechanical Engineering, Faculty of Engineering, Tel Aviv University for the course that is called in many places as “Mechanical Measurements Lab 1” or “Theory and Design of Mechanical Measurements”, “Introduction to Measurements for Mechanical Engineers”, etc.\nThis book does not replace the course materials but rather organizes them in Jupyter and Markdown notebooks, published with Quarto. Hopefully it can become useful learning material for undergraduate engineering laboratory courses. It is an open-source project, and any contribution is welcome ( contact on Github ).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Mechanical Engineering Metrology and Measurements</span>"
    ]
  },
  {
    "objectID": "index.html#textbook-and-relevant-books",
    "href": "index.html#textbook-and-relevant-books",
    "title": "Mechanical Engineering Metrology and Measurements (MEMM)",
    "section": "0.1 Textbook and relevant books:",
    "text": "0.1 Textbook and relevant books:\nThis course follows the (textbook?). It is also recommended to consult with (dunn_davis?) and (wheeler?)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Mechanical Engineering Metrology and Measurements</span>"
    ]
  },
  {
    "objectID": "index.html#learning-objectives",
    "href": "index.html#learning-objectives",
    "title": "Mechanical Engineering Metrology and Measurements (MEMM)",
    "section": "1.1 Learning objectives",
    "text": "1.1 Learning objectives\nBy the end of this course/readings, students will be able to: - Explain fundamental measurement concepts: accuracy, precision, resolution, and uncertainty. - Apply statistical tools to analyze measurement data (distributions, confidence intervals, t‑tests, outlier detection). - Perform calibration and regression analysis for common sensors and instruments. - Analyze dynamic signals using time‑domain and frequency‑domain methods (FFT, windowing, spectral interpretation). - Understand sampling, aliasing, and basic reconstruction for A/D systems. - Model simple measurement systems (first and second order) and interpret step/impulse responses. - Propagate measurement uncertainty (analytical and Monte Carlo) and report results following good practice. - Implement reproducible experiments and analyses using Python and Jupyter notebooks.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Mechanical Engineering Metrology and Measurements</span>"
    ]
  },
  {
    "objectID": "index.html#recommended-prerequisites",
    "href": "index.html#recommended-prerequisites",
    "title": "Mechanical Engineering Metrology and Measurements (MEMM)",
    "section": "1.2 Recommended prerequisites",
    "text": "1.2 Recommended prerequisites\nStudents should be comfortable with: - Calculus and basic differential equations - Linear algebra (vectors, matrices) - Introductory probability and statistics - Basics of signals and systems (sinusoids, frequency, convolution helpful but not required) - Basic Python programming (variables, functions, NumPy arrays) - Familiarity with Jupyter notebooks and command-line usage is helpful",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Mechanical Engineering Metrology and Measurements</span>"
    ]
  },
  {
    "objectID": "index.html#how-to-use-this-book",
    "href": "index.html#how-to-use-this-book",
    "title": "Mechanical Engineering Metrology and Measurements (MEMM)",
    "section": "1.3 How to use this book",
    "text": "1.3 How to use this book\n\nNavigate chapters via the table of contents. Each chapter contains short explanatory pages and runnable notebooks for labs and examples.\nDo the notebooks interactively: create a local virtual environment, install requirements, and run the notebooks in Jupyter Lab/Notebook.\nWork through the “unsorted” and “archive” content only after core topics; many items are homework examples or experimental notes.\nInstructors: adopt notebooks as lab exercises, add assessment items, and redistribute with solutions for guided learning.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Mechanical Engineering Metrology and Measurements</span>"
    ]
  },
  {
    "objectID": "index.html#quick-environment-notes",
    "href": "index.html#quick-environment-notes",
    "title": "Mechanical Engineering Metrology and Measurements (MEMM)",
    "section": "1.4 Quick environment notes",
    "text": "1.4 Quick environment notes\nRecommended Python ecosystem: Python 3.9+, NumPy, SciPy, Matplotlib, pandas, jupyter-book, myst-nb. Add a pinned requirements.txt in the repo root for reproducible builds.\n\nStart with the “theory”, “statistics”, and “a2d” chapters, then proceed to “signal_processing”, “dynamic_signals”, and “calibration” for lab work and examples.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Mechanical Engineering Metrology and Measurements</span>"
    ]
  },
  {
    "objectID": "index.html#table-of-contents",
    "href": "index.html#table-of-contents",
    "title": "Mechanical Engineering Metrology and Measurements (MEMM)",
    "section": "1.5 Table of contents",
    "text": "1.5 Table of contents",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Mechanical Engineering Metrology and Measurements</span>"
    ]
  },
  {
    "objectID": "index.html#copyright-information",
    "href": "index.html#copyright-information",
    "title": "Mechanical Engineering Metrology and Measurements (MEMM)",
    "section": "1.6 Copyright Information",
    "text": "1.6 Copyright Information\n  \nTo the extent possible under law, the person who associated CC0 with this work has waived all copyright and related or neighboring rights to this work.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Mechanical Engineering Metrology and Measurements</span>"
    ]
  },
  {
    "objectID": "theory/index.html",
    "href": "theory/index.html",
    "title": "2  Theory",
    "section": "",
    "text": "3 Theory — Introduction and Learning Goals\nShort summary This chapter covers measurement theory: uncertainty concepts, best practices, measurement-system analysis, and worked Monte Carlo examples.\nLearning objectives - Understand types of measurement uncertainty and how to report them. - Distinguish repeatability vs reproducibility, bias, and systematic errors. - Apply basic uncertainty propagation (analytical and Monte Carlo). - Recognize good-practice recommendations for lab notebooks and reporting.\nKey concepts (brief) - GUM-style uncertainty vs Type A/B estimates. - Propagation of uncertainty for slopes and model parameters. - Role of simulations (Monte Carlo) to validate analytical propagation.\nRecommended notebooks to run - uncertainty_example.ipynb - uncertainty_of_a_slope.ipynb - uncertainty_propagation_monte_carlo_gum.ipynb - teaching_measurement_uncertainty.ipynb - best_practice_summary.ipynb\nSuggested exercises - Compute and compare analytical and Monte Carlo propagation on a simple function. - Prepare a short lab report following the best-practice notebook checklist.\nPrerequisites Basic probability, calculus, and comfort with Python arrays.",
    "crumbs": [
      "Metrology theory",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Theory</span>"
    ]
  },
  {
    "objectID": "theory/index.html#pages-in-this-chapter",
    "href": "theory/index.html#pages-in-this-chapter",
    "title": "2  Theory",
    "section": "3.1 Pages in this chapter",
    "text": "3.1 Pages in this chapter\n\nSensitivity Coefficients in Uncertainty Budgets — Source: \nThis part is the simplified error analysis that we will extend through the course with the more precise definitions — and analysis using regressions, calibration, statistics, dynamics, etc. ### Errors 1. Systematic errors 1. Random errors ### Errors 1. equipment/tool precision error 1. human erro…\n### Link to the source of good practice guides: — https://www.npl.co.uk/resources/gpgs ## What is a measurement A measurement is a single value that is measured at a single point in time. It is a process of giving a value (number…\nThe Engineer’s 9-Step Uncertainty Analysis Checklist — This checklist provides a systematic framework for conducting a thorough uncertainty analysis. It begins with the strategic purpose (Step 0) and moves through the tactical executi…\nMars Rover Temperature Measurement & Uncertainty Analysis — ## 1. Introduction: The Challenge of Measurement in Extreme Environments\n1. Get a free PDF of one of the recommended sources, e.g. https://www.esscolab.com/uploads/files/measurement-guide.pdf — 2. Upload this PDF to one of the AI tools, and ask questions, e.g. https://askyourpdf.com/conversations/d/2d36eb11-2d38-46e5-bbf0-e62027ed9112 Question: can you show me a real c…\nEngineering Example: Uncertainty Analysis in Mechanical Measurements — ## Introduction to the Engineering Problem\n[``{python}](general_measurement_system_analysis.qmd) — #| slideshow: {slide_type: slide} from IPython.display import Image Image('../img/generalized_measurement_system.png') ### Purpose Our purpose to analyse every measurement accor…\nUncertainty Budget of Hot-Wire Anemometer — Isothermal turbulent air flow in a wind tunnel with temperature rise due to friction. Evaluation according to the 8-step GUM method.\nsee https://www.iaea.org/sites/default/files/21/12/9_measurement_and_uncertainty.pdf — ## Measurement of physical properties is a random process - pressure, velocity, temperature are some examples of physical properties of complex physical processes, these are rando…\nTheory — Introduction and Learning Goals — Short summary This chapter covers measurement theory: uncertainty concepts, best practices, measurement-system analysis, and worked Monte Carlo examples.\nIt is strongly recommended to keep a good laboratory notebook for the course. Please consult a couple of sources on the meaning, importance, requirements, tips and tricks of keeping a notebook. — 1. 2. 3. 4. 5.\nSignificant digits — - Engineering measurements are generally accurate to at most only a few digits – three digits of accuracy is considered ‘’standard’’ for engineering analysis\n## Source: — https://www.npl.co.uk/resources/gpgs no 131 ## 1. Decide what you measure and what you need to find out from measurements In this example we want to measure length of a string…\nWhy Simulation is the Future of Uncertainty Evaluation — ## Introduction\nMeasurements are useful only when they can be compared. Traceability is the property of a measurement result that provides an unbroken chain of calibrations to a reference standard, with a stated uncertainty at each step. Good traceability makes results from different labs, instruments, or times comparable and defensible. — Key points - Traceability links your instrument to a reference standard (ideally an SI realization) through documented calibration steps. - Every calibration step should include a…\nJUPYTER NOTEBOOK: Surface Roughness Measurement with GUM-Based Uncertainty Analysis — # Author: Alex Liberzon and Perplexity Pro # Course: Metrology for Mechanical Engineering # Purpose: Single notebook implementing surface roughness measurement and full GUM-based…\nTeaching Measurement in the Introductory Physics Laboratory — Saalih Allie and Andy Buffler, University of Cape Town, South Africa Bob Campbell and Fred Lubben, University of York, UK **Dimitris Evangelinos, Dimitris Psillos, Odyss…\nFollowing this paper by Bluestein:  — ## Definitions and assumptions: - many students hired for roles that involve measurements and tests - modern methods of data collection utilize measurement uncertainty analysis -…\nUncertainty 101 — ## Uncertainty\nUncertainty is calculated to support decisions based on measurements. — Therefore, uncertainty estimates should realistically reflect the measurement process. In this regard, the person tasked with conducting an uncertainty analysis must be knowledgea…\nchanged code — import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm\ndata of resistance measurements: voltage vs current — import numpy as np import matplotlib.pyplot as plt\nExample usage — height_measurements = 10.02, 10.03, 10.01, 10.02, 10.03, 10.02, 10.01, 10.02, 10.03, 10.02 resolution = 0.01 # mm monte_carlo_cube_volume(height_measurements, resolution) `\nSet random seed for reproducibility — np.random.seed(42)",
    "crumbs": [
      "Metrology theory",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Theory</span>"
    ]
  },
  {
    "objectID": "theory/index.html#ordered-reading-suggested",
    "href": "theory/index.html#ordered-reading-suggested",
    "title": "2  Theory",
    "section": "3.2 Ordered reading (suggested)",
    "text": "3.2 Ordered reading (suggested)\nFollow this sequence when teaching or self-studying. The order moves from foundational lab practice and best-practice guidance, to measurement-system analysis and elementary worked examples, then to uncertainty concepts and quantitative propagation methods (analytical & Monte Carlo), and finishes with advanced case studies and community presentations.\n\nlaboratory_notebook.ipynb — practical lab notebook practices and data recording.\nbest_practice_summary.ipynb — concise recommendations for reporting and reproducibility.\nteaching_measurement_uncertainty.ipynb — pedagogical overview of uncertainty.\nstandartization.ipynb — standards and common terminology.\ngeneral_measurement_system_analysis.ipynb — system-level thinking and error sources.\nsimple_example.ipynb — a short worked example linking practice and theory.\nexample_from_best_practice.ipynb — illustrated application of best practices.\nuncertainty_example.ipynb — basic uncertainty calculations and interpretation.\nuncertainty_of_a_slope.ipynb — propagation for regression-derived quantities.\nuncertainty_propagation_monte_carlo_gum.ipynb — Monte Carlo propagation following GUM ideas.\nsimulations_for_uncertainty.ipynb — simulation-driven exploration of uncertainty.\nuncertainty_analysis_NASA.ipynb — applied example from NASA guidance.\niaea_uncertainty_presentation.ipynb — community presentation and advanced perspectives.\nWatch the 1 hr video by Fluke - leading measurement equipment company\n\nRationale: this ordering lets students first acquire good lab habits and reporting skills, then build a conceptual toolbox for system analysis, then learn measurement uncertainty in increasing rigor (examples → slope propagation → Monte Carlo → case studies). Use the checklists added to notebooks to guide in-class or lab activities.",
    "crumbs": [
      "Metrology theory",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Theory</span>"
    ]
  },
  {
    "objectID": "calibration/index.html",
    "href": "calibration/index.html",
    "title": "3  Calibration",
    "section": "",
    "text": "4 Calibration — Introduction and Learning Goals\nShort summary Calibration methods and error analysis for sensors: linear & nonlinear regression, hysteresis, sensitivity, and full calibration workflow.\nLearning objectives - Perform linear regression for sensor calibration and compute confidence intervals. - Analyze hysteresis and nonlinearity errors. - Design calibration experiments and propagate calibration uncertainty into measurements.\nKey concepts (brief) - Regression residuals, standard error, and calibration curve interpretation. - Hysteresis and repeatability characterization. - Sensitivity analysis and combining calibration with measurement uncertainty.\nRecommended notebooks to run - micrometer_calibration.ipynb - regression_analysis.ipynb - full_calibration_analysis_example.ipynb - hysteresis_error_analysis.ipynb - calibration_non_linear_relations.ipynb\nSuggested exercises - Calibrate a sample dataset, report calibration equation and uncertainty. - Compare linear vs nonlinear fits and discuss choice and impact on measurements.\nPrerequisites Basic regression, statistics, and familiarity with plotting in Python.",
    "crumbs": [
      "Metrology theory",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Calibration</span>"
    ]
  },
  {
    "objectID": "calibration/index.html#pages-in-this-chapter",
    "href": "calibration/index.html#pages-in-this-chapter",
    "title": "3  Calibration",
    "section": "4.1 Pages in this chapter",
    "text": "4.1 Pages in this chapter\n\ncreate best fit — p = np.polyfit(x,y,1) print (p) y_fit = np.polyval(p,x) `\ncreate two signals: concentration and temperature — c = StringIO(““” 1.095406121 3.887032952 6.956500526 9.486921797  13.96944459 14.86018043 23.19810833 24.53008787  24.72311112 37.44113657 38.05523491 54.1881169”““)\nSensitivity error example\nincreasing — xi = array(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0) yi = array(-1.12, 0.21, 1.18, 2.09, 3.33, 4.50, 5.26, 6.59, 7.73, 8.68, 9.80) # decreasing xd = xi.copy() yd = a…\nread the data — import numpy as np x = np.array(0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0, 100.0) # cm y = np.array(0.4, 1.0, 2.3, 6.9, 15.8, 36.4, 110.1, 253.2) # Volt `\ndegrees of freedom = number of bins minus the (order of the fit + 1): — print (‘Number of degrees of freedom, K - (m+1) = %d’ % (K - 2)) `\nSensitivity error example\nCalibration — Introduction and Learning Goals — Short summary Calibration methods and error analysis for sensors: linear & nonlinear regression, hysteresis, sensitivity, and full calibration workflow.\nallows to use everything from Numpy and Matplotlib like in Matlab, without np. and plt. — from IPython.display import Image # allows to show images from the web: Image(filename=‘hysteresis_example.png’,width=400) `\nPeak-Peak Voltage (mV) — V = 98.8, 86.0, 74.0, 61.2, 47.2, 32.8, 20.4, 5.2, 8.4, 21.2, 35.2, 49.2, 63.2, 75.2, 88.4, 100.8 # Displacement x = range(0,16) # (mm) # % Error err = 1, 0, -3, -5, -7, -8, -21,…\nImage(‘https://www.higherprecision.com/images/blog_images/higherprecision_gageblocks.jpg’,width=500) — `\ndegrees of freedom = number of bins minus the (order of the fit + 1): — print (‘Number of degrees of freedom, K - (m+1) = %d’ % (K - 2)) `\n%load ‘../scripts/linear_regression.py’ — # or import sys sys.path.append(‘../scripts’) from linear_regression import linreg `\npl.legend((‘\\(y\\)’,‘\\(x^{1.2}\\)’),loc=‘best’) — `",
    "crumbs": [
      "Metrology theory",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Calibration</span>"
    ]
  },
  {
    "objectID": "statistics/index.html",
    "href": "statistics/index.html",
    "title": "4  Statistics",
    "section": "",
    "text": "5 Statistics — Introduction and Learning Goals\nShort summary Hands-on statistics for measurement data: distributions, descriptive stats, hypothesis testing, outliers, and the central limit theorem.\nLearning objectives - Compute and interpret mean, variance, confidence intervals. - Apply t-tests, chi-square tests, and identify outliers. - Relate histograms to probability distributions and sampling variability (CLT).\nKey concepts (brief) - Sampling distributions and the Central Limit Theorem. - When to use t-distribution vs normal approximation. - Robust statistics and practical outlier handling.\nRecommended notebooks to run - basic_statistics.ipynb - distributions.ipynb - t-test.ipynb - Central_limit_theorem_illustration.ipynb - outliers_example.ipynb and outliers_example_pairs.ipynb\nSuggested exercises - Use bootstrap or t-test to compare two small-sample datasets. - Detect and justify removal/retention of outliers in a measurement series.\nPrerequisites Introductory probability and basic Python (NumPy, matplotlib).",
    "crumbs": [
      "Statistics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Statistics</span>"
    ]
  },
  {
    "objectID": "statistics/index.html#pages-in-this-chapter",
    "href": "statistics/index.html#pages-in-this-chapter",
    "title": "4  Statistics",
    "section": "5.1 Pages in this chapter",
    "text": "5.1 Pages in this chapter\n\nPlot the distribution of X_n and the Gaussian fit for comparison — bins = np.linspace(-5, 15, 100);\n```{python} — #| jupyter: {outputs_hidden: false} %matplotlib inline import numpy as np import matplotlib import matplotlib.pyplot as plt import scipy.stats {python} #| jupyter: {outputs_hidden…\nlet’s create some data — x = np.array(12.1,12.3,12.2,12.2,12.4,12.3,12.2,12.4,12.2,12.5) `\nEngineering Testing and Measurements — Review of basic statistics 1. Population – the entire collection of measurements, not all of which will be analyzed statistically. Some variable $ x$, anything that is measurab…\nWe prepare histogram with the \\(\\Delta P = 0.05\\) kPa — bins = arange(9.65,10.55,0.05) n,bins = histogram(y,bins=bins) # # normalization: z = n/(np.sum(n)*0.05)\nMickey Atwal, Cold Spring Harbor Laboratory — — Here we will visualize, in Python, a few important distributions that commonly appear in science and statistics. A more exhaustive list of statistical distributions can be fou…\napproximate using the numerical integration — print(trapz(yx,x)) print(2.b/3) `\nSimulate data — # (a) Accurate & Precise data_a = np.random.normal(loc=10, scale=0.3, size=25) # (b) Accurate, Not Precise data_b = np.random.normal(loc=10, scale=1.0, size=25) # (c) Precise, Not…\nmake it yourself — pos = h1:-1+diff(h1)/2. frequency = h0 bar(pos,frequency,width=1.4) `\nStatistics — Introduction and Learning Goals — Short summary Hands-on statistics for measurement data: distributions, descriptive stats, hypothesis testing, outliers, and the central limit theorem.\nSort x — x = np.sort(x) print(x) `\nnew data is one point less — xnew = x:-1.copy() meanx = mean(xnew) stdx = std(xnew,ddof=1) print (‘x:’, xnew) print (‘mean = %6.2f, std = %6.2f’ % (meanx,stdx))\nbest fit seems to be linear — p = polyfit(x,y,1) Y = polyval(p,x) plot(x,Y,‘–’) text(10,5,‘Y = %4.3f x + %4.3f’ % (p0,p1)) `\n```{python} — #| jupyter: {outputs_hidden: false} import numpy as np import matplotlib.pyplot as pl %matplotlib inline import matplotlib as mpl mpl.rcParams’lines.linewidth’=2 mpl.rcParams’line…\nAuthor: Jake VanderPlas — # License: BSD # The figure produced by this code is published in the textbook # “Statistics, Data Mining, and Machine Learning in Astronomy” (2013) # For more information, see ht…\nFrom https://www.statisticshowto.com/probability-and-statistics/t-test/",
    "crumbs": [
      "Statistics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Statistics</span>"
    ]
  },
  {
    "objectID": "signal_processing/index.html",
    "href": "signal_processing/index.html",
    "title": "5  Signal Processing",
    "section": "",
    "text": "6 Signal Processing — Introduction and Learning Goals\nShort summary Frequency-domain tools for measurement signals: FFT, windowing, spectral interpretation, and basic filtering.\nLearning objectives - Compute and interpret discrete Fourier transforms and spectra. - Understand windowing, spectral leakage, and resolution trade-offs. - Apply simple spectral filtering and reconstruction concepts.\nKey concepts (brief) - Frequency resolution, Nyquist limit, and window-induced spectral effects. - Interpreting power spectra vs amplitude spectra. - Practical filtering: time-domain vs frequency-domain considerations.\nRecommended notebooks to run - simple_fft_two_sine.ipynb - spectrum_example.ipynb - FFT_based_filtering.ipynb - Fourier_transform_with_windowing.ipynb - Frequency_content_of_a_periodic_signal.ipynb\nSuggested exercises - Demonstrate aliasing by downsampling and explain observed artifacts. - Compare window functions on a mixed-frequency signal and discuss leakage.\nPrerequisites Discrete signals, sampling basics, and NumPy FFT usage.",
    "crumbs": [
      "Signal Processing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Signal Processing</span>"
    ]
  },
  {
    "objectID": "signal_processing/index.html#pages-in-this-chapter",
    "href": "signal_processing/index.html#pages-in-this-chapter",
    "title": "5  Signal Processing",
    "section": "6.1 Pages in this chapter",
    "text": "6.1 Pages in this chapter\n\nredefine default figure size and fonts — import matplotlib as mpl mpl.rc(‘font’, size=16) mpl.rc(‘figure’,figsize=(12,8)) mpl.rc(‘lines’, linewidth=1, color=‘lightblue’,linestyle=‘:’,marker=‘o’) `\ninit_printing(pretty_print=True,use_latex=True) — # %matplotlib inline # import matplotlib.pyplot as plt from numpy import arange `\nGiven: — f_s = 100.0 # sampling frequency (Hz) T = 3.0 # total actual sample time (s)\nWe sample a signal at fs = 200 Hz and record 256 points” — # true values A = 1.0 # Volt, amplitude ff = 10.0 # Hz, signal frequency, zero harmonics\nredefine default figure size and fonts — import matplotlib as mpl mpl.rc(‘font’, size=16) mpl.rc(‘figure’,figsize=(12,10)) mpl.rc(‘lines’, linewidth=1, color=‘lightblue’,linestyle=‘:’,marker=‘o’) `\nredefine default figure size and fonts — import matplotlib as mpl # mpl.rc(‘text’, usetex = True) mpl.rc(‘font’, family = ‘sans serif’,size=16) mpl.rc(‘figure’,figsize=(12,8)) mpl.rc(‘lines’, linewidth=1, color=’lightblu…\nSignal Processing — Introduction and Learning Goals — Short summary Frequency-domain tools for measurement signals: FFT, windowing, spectral interpretation, and basic filtering.\nfrom https://stackoverflow.com/questions/15112964/digitizing-an-analog-signal — from future import division",
    "crumbs": [
      "Signal Processing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Signal Processing</span>"
    ]
  },
  {
    "objectID": "a2d/index.html",
    "href": "a2d/index.html",
    "title": "6  A2D",
    "section": "",
    "text": "7 Analog-to-Digital (A2D) — Introduction and Learning Goals\nShort summary Sampling, aliasing, reconstruction, and practical A/D conversion examples.\nLearning objectives - Explain sampling theorem and conditions for perfect reconstruction. - Demonstrate aliasing and anti-aliasing requirements. - Implement simple reconstructions (sinc/interpolation) and study errors.\nKey concepts (brief) - Nyquist frequency and aliasing examples. - Reconstruction using sinc (Cardinal series) and practical limits. - Quantization and its effect on measurement uncertainty (intro-level).\nRecommended notebooks to run - sampling_aliasing_examples.ipynb - mimic_analog_to_digital_conversion.ipynb - reconstruct_with_sinc.ipynb - Reconstruction_periodic_signal_Cardinal_series.ipynb\nSuggested exercises - Create aliased and non-aliased versions of a signal and explain differences. - Reconstruct a band-limited signal with truncated sinc and quantify error.\nPrerequisites Basic Fourier theory and sampling concepts.",
    "crumbs": [
      "Signal Processing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>A2D</span>"
    ]
  },
  {
    "objectID": "a2d/index.html#pages-in-this-chapter",
    "href": "a2d/index.html#pages-in-this-chapter",
    "title": "6  A2D",
    "section": "7.1 Pages in this chapter",
    "text": "7.1 Pages in this chapter\n\n```{python} — import numpy as np import matplotlib.pyplot as plt %matplotlib inline def reconstruct_with_sinc(ts,fd,t): n, = ts.shape dt = ts1 - ts0 fr = for k,ti in enumerate(t): # for each ti…\nsample and hold — from scipy.interpolate import interp1d\nAnalog-to-Digital (A2D) — Introduction and Learning Goals — Short summary Sampling, aliasing, reconstruction, and practical A/D conversion examples.\nfrom https://dsp.stackexchange.com/questions/33596/analog-to-digital-conversion-using-python — import numpy as np import matplotlib.pyplot as plt\nif name == ‘main’: — t = np.arange(0.0,0.6,0.001) fa = 1.0np.sin(2np.pi10t)+0.2np.sin(2np.pi6t) fs = 10 # Hz ts = np.arange(0.0,0.6,1./fs) # sampling time fd = 1.0np.sin(2np.pi10ts)+0.2*np…\nexample — t = np.linspace(0,10,10000) # almost continuous y = 9+np.sin(2np.pi0.1*t)",
    "crumbs": [
      "Signal Processing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>A2D</span>"
    ]
  },
  {
    "objectID": "dynamic_signals/index.html",
    "href": "dynamic_signals/index.html",
    "title": "7  Dynamic Signals",
    "section": "",
    "text": "8 Dynamic Signals — Introduction and Learning Goals\nShort summary Time-domain and dynamical-system behavior: step responses, first/second order systems, and vibration-based measurements.\nLearning objectives - Interpret first- and second-order system responses and key parameters (time constant, damping, natural frequency). - Extract physical quantities (e.g., mass from vibrations) from measured signals. - Link time-domain responses to frequency content.\nKey concepts (brief) - Step response, log-decrement, and damping ratio estimation. - Modal interpretation for simple systems and measurement-driven parameter estimation. - Practical considerations: sensor dynamics and filtering.\nRecommended notebooks to run - first_order_time_response.ipynb - step_response.ipynb - 2nd_order_system_step_function_log_decrement.ipynb - mass_measurement_using_vibrations.ipynb - design_choice_2nd_order_pressure_transducer.ipynb\nSuggested exercises - Estimate time constant and uncertainty from a noisy step response. - Use a recorded vibration signal to estimate a lumped mass or natural frequency.\nPrerequisites Ordinary differential equations basics and elementary signal processing.",
    "crumbs": [
      "Dynamic Signals",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Dynamic Signals</span>"
    ]
  },
  {
    "objectID": "dynamic_signals/index.html#pages-in-this-chapter",
    "href": "dynamic_signals/index.html#pages-in-this-chapter",
    "title": "7  Dynamic Signals",
    "section": "8.1 Pages in this chapter",
    "text": "8.1 Pages in this chapter\n\nDefine transfer function — k = 1 # sensitivity wn = 546.72 # rad/s z=0.2 # damping\nDefine transfer function — fd = 1200 # Hz fn = fd/(np.sqrt(1-0.5**2)) wn = fn/(2*np.pi) # rad/s z=0.5 # damping k = 1 # sensitivity\nStep function — # for a step function, take user input on final and initial values. y_i = 1.0 y_f = 3.0\nDynamic Signals — Introduction and Learning Goals — Short summary Time-domain and dynamical-system behavior: step responses, first/second order systems, and vibration-based measurements.\nu = np.loadtxt(‘../data/data_for_FFT.txt’) — data = np.loadtxt(‘../data/p40_20.ts’) # data source: # http://ldvproc.nambis.de/data/ektdata.html `\nPython script for simulated signal — # … `\nNumber of samplepoints — N = 600 # sample spacing T = 1.0 / 800.0 x = np.linspace(0.0, NT, N) y = np.sin(50.0  2.0np.pix) + 0.5np.sin(80.0  2.0np.pix) yf = fft(y)\nsubtract the DC: — yf = y - np.mean(y) `\nplt.title(‘Step response’) — # plt.show() `\n```{python} — #| jupyter: {outputs_hidden: false} from sympy import * init_printing(pretty_print=True,use_latex=True) %matplotlib inline import matplotlib.pyplot as plt {python} #| jupyter: {ou…",
    "crumbs": [
      "Dynamic Signals",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Dynamic Signals</span>"
    ]
  }
]