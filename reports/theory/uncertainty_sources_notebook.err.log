Traceback (most recent call last):
  File "/home/user/Documents/GitHub/mechanical-engineering-metrology-and-measurements/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/user/Documents/GitHub/mechanical-engineering-metrology-and-measurements/.venv/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/user/Documents/GitHub/mechanical-engineering-metrology-and-measurements/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/Documents/GitHub/mechanical-engineering-metrology-and-measurements/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/user/miniforge3/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/user/Documents/GitHub/mechanical-engineering-metrology-and-measurements/.venv/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/user/Documents/GitHub/mechanical-engineering-metrology-and-measurements/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/user/Documents/GitHub/mechanical-engineering-metrology-and-measurements/.venv/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Complete Uncertainty Budget Analysis
print("COMPLETE UNCERTAINTY BUDGET")
print("=" * 50)

# Display all uncertainty sources
print("Individual Uncertainty Components:")
print("-" * 35)
for source, value in uncertainty_budget.items():
    print(f"{source:<20}: {value:>8.2f} ppm")

# Create uncertainty budget DataFrame
budget_data = {
    'Source': list(uncertainty_budget.keys()),
    'Uncertainty (ppm)': list(uncertainty_budget.values()),
    'Type': ['A', 'A', 'A', 'B', 'B', 'B', 'B', 'A'],  # Type A or B
    'Distribution': ['Normal', 'Normal', 'Normal', 'Rectangular', 
                    'Rectangular', 'Rectangular', 'Normal', 'Normal']
}

budget_df = pd.DataFrame(budget_data)

# Calculate variance contributions
variances = [u**2 for u in uncertainty_budget.values()]
total_variance = sum(variances)
contributions = [(v/total_variance)*100 for v in variances]

budget_df['Variance'] = variances
budget_df['Contribution (%)'] = contributions

print(f"\nDetailed Uncertainty Budget:")
print(budget_df.round(2))

# Calculate combined standard uncertainty
combined_uncertainty = math.sqrt(total_variance)
print(f"\nCombined Standard Uncertainty: {combined_uncertainty:.2f} ppm")

# Calculate expanded uncertainty (k=2 for 95% confidence)
coverage_factor = 2.0
expanded_uncertainty = coverage_factor * combined_uncertainty
print(f"Expanded Uncertainty (k=2): {expanded_uncertainty:.2f} ppm")

# Show top contributors
top_contributors = budget_df.nlargest(3, 'Contribution (%)')
print(f"\nTop 3 Contributors:")
for idx, row in top_contributors.iterrows():
    print(f"{row['Source']}: {row['Contribution (%)']:.1f}%")
------------------

----- stdout -----
COMPLETE UNCERTAINTY BUDGET
==================================================
Individual Uncertainty Components:
-----------------------------------
Repeatability       :     4.80 ppm
Reproducibility     :     0.85 ppm
Stability           :     3.13 ppm
Drift               :     3.10 ppm
Resolution          :     0.29 ppm
Reference Standard  :     2.10 ppm
Ref Std Stability   :     0.20 ppm
------------------

[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[10][39m[32m, line 20[39m
[32m     11[39m [38;5;66;03m# Create uncertainty budget DataFrame[39;00m
[32m     12[39m budget_data = {
[32m     13[39m     [33m'[39m[33mSource[39m[33m'[39m: [38;5;28mlist[39m(uncertainty_budget.keys()),
[32m     14[39m     [33m'[39m[33mUncertainty (ppm)[39m[33m'[39m: [38;5;28mlist[39m(uncertainty_budget.values()),
[32m   (...)[39m[32m     17[39m                     [33m'[39m[33mRectangular[39m[33m'[39m, [33m'[39m[33mRectangular[39m[33m'[39m, [33m'[39m[33mNormal[39m[33m'[39m, [33m'[39m[33mNormal[39m[33m'[39m]
[32m     18[39m }
[32m---> [39m[32m20[39m budget_df = [43mpd[49m[43m.[49m[43mDataFrame[49m[43m([49m[43mbudget_data[49m[43m)[49m
[32m     22[39m [38;5;66;03m# Calculate variance contributions[39;00m
[32m     23[39m variances = [u**[32m2[39m [38;5;28;01mfor[39;00m u [38;5;129;01min[39;00m uncertainty_budget.values()]

[36mFile [39m[32m~/Documents/GitHub/mechanical-engineering-metrology-and-measurements/.venv/lib/python3.12/site-packages/pandas/core/frame.py:778[39m, in [36mDataFrame.__init__[39m[34m(self, data, index, columns, dtype, copy)[39m
[32m    772[39m     mgr = [38;5;28mself[39m._init_mgr(
[32m    773[39m         data, axes={[33m"[39m[33mindex[39m[33m"[39m: index, [33m"[39m[33mcolumns[39m[33m"[39m: columns}, dtype=dtype, copy=copy
[32m    774[39m     )
[32m    776[39m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(data, [38;5;28mdict[39m):
[32m    777[39m     [38;5;66;03m# GH#38939 de facto copy defaults to False only in non-dict cases[39;00m
[32m--> [39m[32m778[39m     mgr = [43mdict_to_mgr[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mindex[49m[43m,[49m[43m [49m[43mcolumns[49m[43m,[49m[43m [49m[43mdtype[49m[43m=[49m[43mdtype[49m[43m,[49m[43m [49m[43mcopy[49m[43m=[49m[43mcopy[49m[43m,[49m[43m [49m[43mtyp[49m[43m=[49m[43mmanager[49m[43m)[49m
[32m    779[39m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(data, ma.MaskedArray):
[32m    780[39m     [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mnumpy[39;00m[34;01m.[39;00m[34;01mma[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m mrecords

[36mFile [39m[32m~/Documents/GitHub/mechanical-engineering-metrology-and-measurements/.venv/lib/python3.12/site-packages/pandas/core/internals/construction.py:503[39m, in [36mdict_to_mgr[39m[34m(data, index, columns, dtype, typ, copy)[39m
[32m    499[39m     [38;5;28;01melse[39;00m:
[32m    500[39m         [38;5;66;03m# dtype check to exclude e.g. range objects, scalars[39;00m
[32m    501[39m         arrays = [x.copy() [38;5;28;01mif[39;00m [38;5;28mhasattr[39m(x, [33m"[39m[33mdtype[39m[33m"[39m) [38;5;28;01melse[39;00m x [38;5;28;01mfor[39;00m x [38;5;129;01min[39;00m arrays]
[32m--> [39m[32m503[39m [38;5;28;01mreturn[39;00m [43marrays_to_mgr[49m[43m([49m[43marrays[49m[43m,[49m[43m [49m[43mcolumns[49m[43m,[49m[43m [49m[43mindex[49m[43m,[49m[43m [49m[43mdtype[49m[43m=[49m[43mdtype[49m[43m,[49m[43m [49m[43mtyp[49m[43m=[49m[43mtyp[49m[43m,[49m[43m [49m[43mconsolidate[49m[43m=[49m[43mcopy[49m[43m)[49m

[36mFile [39m[32m~/Documents/GitHub/mechanical-engineering-metrology-and-measurements/.venv/lib/python3.12/site-packages/pandas/core/internals/construction.py:114[39m, in [36marrays_to_mgr[39m[34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)[39m
[32m    111[39m [38;5;28;01mif[39;00m verify_integrity:
[32m    112[39m     [38;5;66;03m# figure out the index, if necessary[39;00m
[32m    113[39m     [38;5;28;01mif[39;00m index [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m114[39m         index = [43m_extract_index[49m[43m([49m[43marrays[49m[43m)[49m
[32m    115[39m     [38;5;28;01melse[39;00m:
[32m    116[39m         index = ensure_index(index)

[36mFile [39m[32m~/Documents/GitHub/mechanical-engineering-metrology-and-measurements/.venv/lib/python3.12/site-packages/pandas/core/internals/construction.py:677[39m, in [36m_extract_index[39m[34m(data)[39m
[32m    675[39m lengths = [38;5;28mlist[39m([38;5;28mset[39m(raw_lengths))
[32m    676[39m [38;5;28;01mif[39;00m [38;5;28mlen[39m(lengths) > [32m1[39m:
[32m--> [39m[32m677[39m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([33m"[39m[33mAll arrays must be of the same length[39m[33m"[39m)
[32m    679[39m [38;5;28;01mif[39;00m have_dicts:
[32m    680[39m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[32m    681[39m         [33m"[39m[33mMixing dicts with non-Series may lead to ambiguous ordering.[39m[33m"[39m
[32m    682[39m     )

[31mValueError[39m: All arrays must be of the same length

