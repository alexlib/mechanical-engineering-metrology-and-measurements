Traceback (most recent call last):
  File "C:\Users\Alex L\Downloads\Github\mechanical-engineering-metrology-and-measurements\.venv\Lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Alex L\Downloads\Github\mechanical-engineering-metrology-and-measurements\.venv\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Alex L\Downloads\Github\mechanical-engineering-metrology-and-measurements\.venv\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Alex L\Downloads\Github\mechanical-engineering-metrology-and-measurements\.venv\Lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Alex L\AppData\Roaming\uv\python\cpython-3.12.11-windows-x86_64-none\Lib\asyncio\base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\Alex L\Downloads\Github\mechanical-engineering-metrology-and-measurements\.venv\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Alex L\Downloads\Github\mechanical-engineering-metrology-and-measurements\.venv\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Alex L\Downloads\Github\mechanical-engineering-metrology-and-measurements\.venv\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
p.plot(specu[2:np.int(lenu/2)])
------------------


[31m---------------------------------------------------------------------------[39m
[31mAttributeError[39m                            Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[9][39m[32m, line 1[39m
[32m----> [39m[32m1[39m p.plot(specu[[32m2[39m:[43mnp[49m[43m.[49m[43mint[49m(lenu/[32m2[39m)])

[36mFile [39m[32m~\Downloads\Github\mechanical-engineering-metrology-and-measurements\.venv\Lib\site-packages\numpy\__init__.py:791[39m, in [36m__getattr__[39m[34m(attr)[39m
[32m    786[39m     warnings.warn(
[32m    787[39m         [33mf[39m[33m"[39m[33mIn the future `np.[39m[38;5;132;01m{[39;00mattr[38;5;132;01m}[39;00m[33m` will be defined as the [39m[33m"[39m
[32m    788[39m         [33m"[39m[33mcorresponding NumPy scalar.[39m[33m"[39m, [38;5;167;01mFutureWarning[39;00m, stacklevel=[32m2[39m)
[32m    790[39m [38;5;28;01mif[39;00m attr [38;5;129;01min[39;00m __former_attrs__:
[32m--> [39m[32m791[39m     [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(__former_attrs__[attr], name=[38;5;28;01mNone[39;00m)
[32m    793[39m [38;5;28;01mif[39;00m attr [38;5;129;01min[39;00m __expired_attributes__:
[32m    794[39m     [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m(
[32m    795[39m         [33mf[39m[33m"[39m[33m`np.[39m[38;5;132;01m{[39;00mattr[38;5;132;01m}[39;00m[33m` was removed in the NumPy 2.0 release. [39m[33m"[39m
[32m    796[39m         [33mf[39m[33m"[39m[38;5;132;01m{[39;00m__expired_attributes__[attr][38;5;132;01m}[39;00m[33m"[39m,
[32m    797[39m         name=[38;5;28;01mNone[39;00m
[32m    798[39m     )

[31mAttributeError[39m: module 'numpy' has no attribute 'int'.
`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:
    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations

