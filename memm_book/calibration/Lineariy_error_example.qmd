---
title: Linearity error example
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.18.1
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---



```{python}
#| jupyter: {outputs_hidden: false}
import numpy as np
import matplotlib.pyplot as pl
%matplotlib inline

pl.rcParams['figure.figsize'] = 10, 8 
pl.rcParams['font.size'] = 18
```

```{python}
#| jupyter: {outputs_hidden: false}
x = np.r_[np.linspace(20,220,10), np.linspace(180,0,9)]
y = np.array([20,40,59,77,97,117,137,156,175,195,176,156,136,117,97,78,58,39,20])
```

```{python}
#| jupyter: {outputs_hidden: false}
print(f'x = {x}')
print(f'y = {y}')
```

```{python}
#| jupyter: {outputs_hidden: false}
pl.plot(x,y,'--o')
pl.xlabel(r'$x$')
pl.ylabel(r'$y$')
```

```{python}
#| jupyter: {outputs_hidden: false}
# create best fit
p = np.polyfit(x,y,1)
print (p)
y_fit = np.polyval(p,x)
```

```{python}
#| jupyter: {outputs_hidden: false}
pl.plot(x,y,'ro',x,y_fit,'b--')
pl.xlabel(r'$x$')
pl.ylabel(r'$y$')
pl.legend(('data','fit'),loc='best')
```

```{python}
#| jupyter: {outputs_hidden: false}
print (f'measured y = {y}')
print (f'estimated y = {y_fit}')
```

# Linearity error
$\epsilon_L = |y_L - y|$

$\epsilon_{L_{max}} = max(\epsilon_L)$

$r_0 = y_{max} - y_{min}$

$\% \epsilon_{L_{max}} = \frac{\epsilon_{L_{max}}}{r_0}\times 100$

```{python}
#| jupyter: {outputs_hidden: false}
epsilon_L = abs(y - y_fit)
epsilon_L_max = max(epsilon_L)
r0 = max(y) - min(y)
percent_epsilon_L_max = epsilon_L_max/r0 * 100.
```

```{python}
#| jupyter: {outputs_hidden: false}
pl.errorbar(x,y_fit,10*epsilon_L)
pl.xlabel(r'$x$')
pl.ylabel(r'$y$')

print ('max error is %4.3f' % epsilon_L_max)
print ('the range is %4.3f' % r0)
print ('Linearity error is %3.2f%s' % (percent_epsilon_L_max,'%'))
```

